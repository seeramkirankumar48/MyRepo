Imp points::
------------
-->In java, a boolean value cannot hold the integer value it holds only true or false.
-->All the objects are stored in the Garbage-collectible heap. so if there are any unreferenced objects those are collected by the garbage collector.
-->if there are 100 classes it is not that easy to deliver all the classes to the client(since misses can happen) so it is quite easy if we package them into a .jar file and specify the manifest file where the main method is.
-->Arrays are always the objects whether they hold the primitive types or reference types.
-->length is just a parameter in the Array.
-------------------------
Disadvantages of Arrays::
-------------------------
1.Arrays cannot grow in size.
2.Arrays are used to store the homogenous types of data.
3.Arrays should always be used by the index.
4.we have to specify the size while creating the array.

we can create the array and initialize in same line using::
String[] arr={"kiran","kumar","seeram"};
or else in seperate lines using::
String[] arr;
arr=new String[]{"kiran","kumar","seeram"};
-------------------
Getters & setters::
-------------------
The getters & setters will not allow the instance variables to be exposed and they provide the validations to the fields before initialization it is a way of achieving encapsulation.
1.All the instance variables are declared private and the getters and setters are provided with public access.
Ex::
-----
public class MyClass {
    public static void main(String args[]) {
       Student stu=new Student();
       stu.setsid(100);
       System.out.println(stu.getSid());
    }
}
class Student{
    int sid;
    //getter
    public int getSid(){
        return this.sid;
    }
    //setter
    public void setsid(int id){
        this.sid=id;
    }
}
-->The instance variables are need not be intitialized even though without initialization they have the default values::
int - 0
float - 0.0
object(references) & string - null
boolean - false
-----------------------------------------------------------
Difference between local variables and instance variables::
-----------------------------------------------------------
Local variables::
-----------------
These are declared inside the method.
instance variables::
--------------------
These are declared inside the class.
1.The instance variables can have the default values where as for the local variables they need to be initialized before the usage.
== Operator::
-------------
the "==" operator is used to check whether two variables values are same or not and it is also used to check whether two reference variables are pointing to the same object or not. In order to compare the objects itself use the equals() method.

-->The "Math" class is present in java.lang package. it also contains objects for Integer,Double,Float
-->The ArrayList class present in the java.util package.

ArrayLists::
------------
1.While creation of ArrayList we need not specify any size.

ArrayList<String> arr=new ArrayList<String>();
ArrayList can grow or sink in size.

2.unlike in array's we don't use [] to get the element.
3.ArrayList accepts only Reference types.

-->In java it is always pass by value only.
-->A base class is called superclass and the class which is inheriting that is called subclass.
-->A subclass can inherit all the methods and instance variables from the super class.
-->If a subclass has its own functionality then it can override the base class methods.(the instance variables of the super class are not overridden).
-->To know if you've designed your types correctly, ask "Does it make sense to say type X is-a type Y"
-->Inheritance is an "IS-A" relationship.
-->Triangle is a shape but the reverse (shape is a Triangle is not true)
-->if X IS-A Y (x->y) then X can do all the things that Y can do.
-->you can invoke the super class method by super.method()



184